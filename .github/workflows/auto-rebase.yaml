name: Rebase Pull Requests

on:
  push:
    branches:
      - main
permissions:
  contents: write
  pull-requests: write
    
jobs:
  check-and-rebase:
    runs-on: ubuntu-latest
    steps:          
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # We need full commit history for rebase
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Dependencies
        run: npm install nodemailer
        
      - name: Set Git user details
        run: |
          git config --local user.email '41898282+github-actions[bot]@users.noreply.github.com'
          git config --local user.name 'github-actions[bot]'

      #
      - name: Get branch to rebase
        id: get-rebase-branch
        uses: actions/github-script@v7
        with:
          script: |
            let pr = null;
            let page = 1;
            let perPage = 100;
            let prList = [];
            
            while (!pr) { // Loop until find PR to rebase, or no more PRs to check
              const prs = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sort: 'created',
                direction: 'asc',
                per_page: perPage,
                page: page
              });
              const filteredPRs = prs.data.filter(potentialPR =>
                potentialPR.auto_merge !== null &&
                potentialPR.labels.some(label => label.name === 'auto-rebase')
              );
              for (const potentialPR of filteredPRs) {
                let email = null;
                try {
                  const { data: user } = await github.rest.users.getByUsername({ username: potentialPR.user.login });
                  email = user.email;
                } catch (error) {
                  console.error(`Failed to retrieve email for user ${pr.user.login}:`, error);
                }
                let status = false;
                try { // Try rebase, if conflict then try next branch
                  console.log(`Checking ${potentialPR.url}`);
                  await exec.exec(`git fetch origin ${potentialPR.head.ref}`);
                  await exec.exec(`git fetch origin ${potentialPR.base.ref}`);
                  await exec.exec(`git checkout ${potentialPR.head.ref}`);
                  await exec.exec(`git rebase ${potentialPR.base.ref}`);
                  await exec.exec(`git checkout main`);
                  pr = potentialPR;
                  if (email != null) {
                    success_email = email;
                  }
                  status = true;
                  prList.push({
                    pr: potentialPR.number,
                    status: status,
                    email: email,
                    author: potentialPR.user.login
                  });
                  break;
                } catch (error) {
                  console.log(`PR #${potentialPR.number} cannot be rebased: ${error.message}`);
                  await exec.exec(`git rebase --abort`);
                  await exec.exec(`git checkout main`);

                  prList.push({
                    pr: potentialPR.number,
                    status: status,
                    email: email,
                    author: potentialPR.user.login
                  });
                }
              }

              if (prs.data.length < perPage) {
                break;
              }
              page += 1;
            }
            if (pr) {
              core.notice('PR to rebase: ' + pr.html_url);
              core.setOutput('BRANCH', pr.head.ref);
              core.setOutput('PR_LIST', JSON.stringify({ pr: prList }));
            } else {
              console.log('No PR to rebase');
              core.notice('No PR to rebase.')
              core.setOutput('BRANCH', '');
              core.setOutput('PR_LIST', JSON.stringify({ pr: prList }));
            }
      
      - name: Rebase
        if: ${{ steps.get-rebase-branch.outputs.BRANCH != '' }}
        run: |
          branch=${{ steps.get-rebase-branch.outputs.BRANCH }}
          git checkout $branch
          git push origin $branch --force-with-lease

      - name: Post Comments
        uses: actions/github-script@v7
        env:
          PR_LIST: ${{ steps.get-rebase-branch.outputs.PR_LIST }}
        with:
          script: |
            const prList = JSON.parse(process.env.PR_LIST).pr;
            console.log(prList);

            async function deletePreviousComment(prNumber) {
              const comments = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber
              });
              const previousComment = comments.data.find(comment => comment.body.includes("Auto Rebase") && comment.user.type === 'Bot');
              if (previousComment != null) {
                await github.rest.issues.deleteComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: previousComment.id
                });
              }
            }
            
            for (const { pr, status, author } of prList) {
              await deletePreviousComment(pr);
              const body = status
                ? `✅ **Auto Rebase Succeeded**\n@${author}`
                : `❌ **Auto Rebase Failed**\n@${author}`;
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr,
                body: body
              });
            }
            
      - name: Send Emails
        uses: actions/github-script@v7
        env:
          SMTP_HOST: ${{ secrets.SMTP_HOST }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASS: ${{ secrets.SMTP_PASS }}
          PR_LIST: ${{ steps.get-rebase-branch.outputs.PR_LIST }}
        with:
          script: |
            const nodemailer = require('nodemailer');
            const prList = JSON.parse(process.env.PR_LIST).pr;
            console.log(prList);
      

