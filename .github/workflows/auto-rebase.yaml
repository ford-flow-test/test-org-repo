name: Rebase Pull Requests

on:
  push:
    branches:
      - main
permissions:
  contents: write
    
jobs:
  check-and-rebase:
    runs-on: ubuntu-latest
    steps:          
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # We need full commit history for rebase
          
      - name: Set Git user details
        run: |
          git config --local user.email '41898282+github-actions[bot]@users.noreply.github.com'
          git config --local user.name 'github-actions[bot]'
          
      - name: Get branch to rebase
        id: get-rebase-branch
        uses: actions/github-script@v7
        with:
          script: |
            let pr = null;
            let page = 1;
            let perPage = 100;
            let fail_prs = [];
            while (!pr) { // Loop until find PR to rebase, or no more PRs to check
              const prs = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sort: 'created',
                direction: 'asc',
                per_page: perPage,
                page: page
              });
              const filteredPRs = prs.data.filter(potentialPR =>
                potentialPR.auto_merge !== null &&
                potentialPR.labels.some(label => label.name === 'auto-rebase')
              );

              for (const potentialPR of filteredPRs) {
                try { // Try rebase, if conflict then try next branch
                  console.log(`Checking ${potentialPR.url}`);
                  console.log(potentialPR.user);
                  const user = await github.rest.users.getByUsername({
                    username: potentialPR.user.login
                  });
                  console.log(potentialPR.number);
                  await exec.exec(`git fetch origin ${potentialPR.head.ref}`);
                  await exec.exec(`git fetch origin ${potentialPR.base.ref}`);
                  await exec.exec(`git checkout ${potentialPR.head.ref}`);
                  await exec.exec(`git rebase ${potentialPR.base.ref}`);
                  await exec.exec(`git checkout main`);
                  pr = potentialPR;
                  break;
                } catch (error) {
                  console.log(`PR #${potentialPR.number} cannot be rebased: ${error.message}`);
                  await exec.exec(`git rebase --abort`);
                  await exec.exec(`git checkout main`);
                  fail_prs.push(potentialPR.number);
                }
              }
              
              if (prs.data.length < perPage) {
                break;
              }
              page += 1;
            }
            if (pr) {
              core.notice('PR to rebase: ' + pr.html_url);
              core.setOutput('BRANCH', pr.head.ref);
              core.setOutput('SUCCESS_PR', pr.number);
              core.setOutput('FAIL_PRS', fail_prs);
            } else {
              console.log('No PR to rebase');
              core.notice('No PR to rebase.')
              core.setOutput('BRANCH', '');
              core.setOutput('SUCCESS_PR', '');
              core.setOutput('FAIL_PRS', fail_prs);
            }
      
      - name: Rebase
        if: ${{ steps.get-rebase-branch.outputs.BRANCH != '' }}
        run: |
          branch=${{ steps.get-rebase-branch.outputs.BRANCH }}
          git checkout $branch
          git push origin $branch --force-with-lease

      - name: Post Comment
        uses: actions/github-script@v7
        with:
          script: |
            const failPrs = JSON.parse('${{ steps.get-rebase-branch.outputs.FAIL_PRS }}');
            const successPr = '${{ steps.get-rebase-branch.outputs.SUCCESS_PR }}';
            const failBody = `❌ **Auto Rebase Failed**`
            const successBody = `✅ **Auto Rebase Successed**`
            console.log('Posting comment on failed PRs...');
            failPrs.forEach((pr) => {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr,
                body: failBody
              });
            });
            console.log('Posting comment on successed PR...');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr,
              body: successBody
            });            
      
