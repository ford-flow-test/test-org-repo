name: Rebase Pull Requests

on:
  push:
    branches:
      - main
permissions:
  contents: write
    
jobs:
  check-and-rebase:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Get PR to rebase
        id: get-rebase-pr
        uses: actions/github-script@v7
        with:
          script: |
            let pr = null;
            let page = 1;
            let perPage = 100;

            while (!pr) { // Loop until find PR to rebase, or no more PRs to check
              const prs = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sort: 'created',
                direction: 'asc',
                per_page: perPage,
                page: page
              });
              pr = prs.data.find(pr =>
                pr.auto_merge !== null &&
                pr.labels.some(label => label.name === 'auto-rebase')
              );
              if (prs.data.length < perPage) {
                break;
              }
              page += 1;
            }
            if (pr) {
              console.log(pr);
            } else {
              console.log("No PR to rebase");
            }
          
#      - name: Check for 'auto-rebase' label
#        run: |
#          # Get PR number from the context
#          PR_NUMBER=$(echo $GITHUB_REF | cut -d'/' -f3)
#          
#          # Fetch labels for this PR
#          labels=$(gh pr view $PR_NUMBER --json labels --jq '.labels | map(.name)')
#          
#          # Check if 'auto-rebase' label is present
#          if echo $labels | grep -q "auto-rebase"; then
#            echo "PR #$PR_NUMBER has 'auto-rebase' label. Performing rebase..."
#            git fetch origin main
#            git checkout pr/$PR_NUMBER
#            git rebase origin/main
#            git push --force-with-lease
#          else
#            echo "PR #$PR_NUMBER does not have 'auto-rebase' label. Skipping rebase..."
#          fi
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
